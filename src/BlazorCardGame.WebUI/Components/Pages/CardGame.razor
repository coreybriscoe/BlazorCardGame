@page "/"
@rendermode InteractiveServer
@using BlazorCardGame.WebUI.Components;
@using BlazorCardGame.WebUI.Components.Cards;

<PageTitle>Card Game</PageTitle>

<div id="cardgame">
    <div id="info-area">
        <div id="progress-cell" class="flex-row darkgold-bg">
            <div class="flex-1 cell">
                Ante <span class="big-number gold">2</span>/8
            </div>
            <div class="flex-3"><span class="big-number bold">Big Blind</span></div>
            <div class="flex-1 cell">Round <span class="big-number gold">4</span></div>
        </div>
        <div id="challenge-cell" class="flex-row goal cell darkgold-bg">
            <div class="medallion-container flex-1">
                <div class="medallion flex-center">
                    <div>BIG</div>
                    <div>BLIND</div>
                </div>
            </div>
            <div class="cell red flex-2 bold big-number">1200</div>
            <div class="flex-1 flex-column">
                <div>score to win</div>
                <div>$$$$</div>
            </div>
        </div>
        <div id="score-cell" class="cell flex-row">
            <div class="flex-1 flex-center">Round score</div>
            <div class="cell flex-2 bold big-number">0</div>
            <div class="flex-1"></div>
        </div>
        <div id="calculation-cell" class="calculation cell flex-column">
            <div id="hand-category">@handCategory <span id="hand-category-level">lvl. 1</span></div>
            <div class="flex-row w-half">
                <div class="colorbox blue-borderless-bg flex-3 bold">40</div>
                <div id="multiplier-x" class="flex-1">x</div>
                <div class="colorbox red-borderless-bg flex-3 bold">2</div>
            </div>
        </div>
        <div id="inventory-cell" class="inventory cell flex-row">
            <div class="colorbox-thin gold gold-border flex-center flex-1 bold big-number">$22</div>
            <div class="colorbox-thin blue-border flex-row flex-1">
                <div class="flex-center"><span class="bold blue big-number">3</span> Hands</div>
            </div>
            <div class="colorbox-thin red-border flex-column flex-1">
                <div class="flex-center"><span class="bold red big-number">2</span> Discards</div>
            </div>
        </div>
        <div id="help-cell" class="cell flex-row">
            <div class="flex-center flex-1">
                <div class="button-small lime-bg flex-center">R</div>
            </div>
            <div class="flex-center flex-1">
                <div class="button-small pink-bg flex-center">?</div>
            </div>
            <div class="flex-center flex-1">
                <div class="button-small orange-bg flex-center">O</div>
            </div>
        </div>

    </div>
    <div id="play-area">
        <div id="play-discard-row">
            <div class="flex-row flex-center w-3-4">
                @if (handCategory != "?") {
                    <div class="colorbox blue-bg flex-1">Play</div>
                    <div class="colorbox red-bg flex-1">Discard</div>
                } else {
                    <div class="flex-2">Select some cards from your hand.</div>
                }
                <div class="flex-center flex-1">
                    <PoolWithCounter CurrentCount=@deck.Count() TotalCount=@deck.DeckSize()>
                        <DeckComponent DrawAllowed=true OnClick=@DeckClicked />
                    </PoolWithCounter>
                </div>
            </div>
        </div>

        <PoolWithCounter class="raised" CurrentCount=@hand.Count() TotalCount=@handLimit>
            <CardPoolComponent Cards=@(hand.Cast<ICard>().ToList()) cardsSelectable=true OnCardsSelected=@OnHandCardsSelected />
        </PoolWithCounter>

    </div>
</div>
@code {
    private int handLimit = 8;
    private void DeckClicked()
    {
        if (deck.Count() < 1 || hand.Count() >= handLimit) return;
        ICard card = deck.Draw();
        hand.Add((PlayingCard) card);
    }

    List<BasePlayingCard> hand = new List<BasePlayingCard>
    {
        @* new PlayingCard(1, '♦', isFaceUp: true, isSelectable: true), *@
    };

    static Deck deck;

    protected override void OnInitialized()
    {
        char[] suits = { '♦', '♣', '♥', '♠' };
        List<ICard> deckCards = new List<ICard>();
        for (int i = 1; i < 14; i++)
        {
            string rankString = i switch
            {
                1 => "A",
                11 => "J",
                12 => "Q",
                13 => "K",
                _ => i.ToString()
            };
            for (int j = 0; j < 4; j++)
            {
                deckCards.Add(new PlayingCard(i, suits[j], rankString: rankString, isFaceUp: true, isSelectable: true));
            }
        }
        deck = new Deck(deckCards);
        deck.Shuffle();

        // Draw cards
        for (int i = 0; i < handLimit; i++)
        {
            ICard card = deck.Draw();
            hand.Add((PlayingCard) card);
        }
    }

    private string handCategory = "?";
    private void OnHandCardsSelected(List<BasePlayingCard> handCards)
    {
        handCategory = PokerLogic.GetHandCategoryNameForCards(handCards.ToList<IPlayingCard>());
    }
}
