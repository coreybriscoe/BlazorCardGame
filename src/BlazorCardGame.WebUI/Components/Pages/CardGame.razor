@namespace BlazorCardGame.WebUI.Components.Pages
@page "/"
@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using BlazorCardGame.WebUI.Components.PlayArea

<PageTitle>Card Game</PageTitle>

<div id="cardgame">
    <div id="info-area">
        <div id="progress-cell" class="flex-row darkgold-bg">
            <div class="flex-1 cell">
                Ante <span class="big-number gold">@RunState.Value.Ante</span>/8
            </div>
            <div class="flex-3"><span class="big-number bold">Big Blind</span></div>
            <div class="flex-1 cell">Round <span class="big-number gold">@RunState.Value.Round</span></div>
        </div>
        <div id="challenge-cell" class="flex-row goal cell darkgold-bg">
            <div class="medallion-container flex-1">
                <div class="medallion darkgold-bg flex-center">
                    <div>BIG</div>
                    <div>BLIND</div>
                </div>
            </div>
            <div class="red flex-2 bold big-number">@scoreToWin</div>
            <div class="flex-1 flex-column">
                <div>score to win</div>
                <div class="dollars">$$$$</div>
            </div>
        </div>
        <div id="score-cell" class="cell flex-row">
            <div class="flex-1 flex-center">Round score</div>
            <div class="flex-2 bold big-number">@RoundState.Value.RoundScore</div>
            <div class="flex-1"></div>
        </div>
        <div id="calculation-cell" class="calculation cell flex-column">
            <div id="hand-category">@handCategory <span id="hand-category-level">lvl. 1</span></div>
            <div class="flex-row w-half">
                <div class="colorbox blue-borderless-bg flex-3 bold">@handScore</div>
                <div id="multiplier-x" class="flex-1">x</div>
                <div class="colorbox red-borderless-bg flex-3 bold">@handMultiplier</div>
            </div>
        </div>
        <div id="inventory-cell" class="inventory cell flex-row">
            <div class="colorbox-thin gold gold-border flex-center flex-1 bold big-number">$@RunState.Value.Cash</div>
            <div class="colorbox-thin blue-border flex-row flex-1">
                <div class="flex-center"><span class="bold blue big-number">@RoundState.Value.HandsRemaining</span> Hands</div>
            </div>
            <div class="colorbox-thin red-border flex-column flex-1">
                <div class="flex-center"><span class="bold red big-number">@RoundState.Value.DiscardsRemaining</span> Discards</div>
            </div>
        </div>
        <div id="help-cell" class="cell flex-row">
            <div class="flex-center flex-1">
                <div class="button-small lime-bg flex-center">R</div>
            </div>
            <div class="flex-center flex-1">
                <div class="button-small pink-bg flex-center">?</div>
            </div>
            <div class="flex-center flex-1">
                <div class="button-small orange-bg flex-center">O</div>
            </div>
        </div>

    </div>
    <div id="play-area">
        <div class="flex-row flex-center">
            <PoolWithCounter class="raised flex-3" CurrentCount=0 TotalCount=5>
                <CardPoolComponent Cards=@(new List<PlayingCard>().Cast<ICard>().ToList()) cardsSelectable=false />
            </PoolWithCounter>
            <PoolWithCounter class="raised flex-2" CurrentCount=0 TotalCount=2>
                <CardPoolComponent Cards=@(new List<PlayingCard>().Cast<ICard>().ToList()) cardsSelectable=false />
            </PoolWithCounter>
        </div>
        <div id="play-discard-row">
            <div class="flex-row flex-center w-3-4">
                @if (handCategory != "?") {
                    <div class="colorbox blue-bg flex-1" @onclick="PlayHandClicked">Play</div>
                    <div class="colorbox red-bg flex-1" @onclick="DiscardHandClicked">Discard</div>
                } else {
                    <div class="flex-2">Select some cards from your hand.</div>
                }
                <div class="flex-center flex-1">
                    <PoolWithCounter CurrentCount=@deck.Count() TotalCount=@deck.DeckSize()>
                        <DeckComponent DrawAllowed=true />
                    </PoolWithCounter>
                </div>
            </div>
        </div>

        <div>
            <PoolWithCounter class="raised" CurrentCount=@hand.Count() TotalCount=@handLimit>
                <CardPoolComponent Cards=@(hand.Cast<ICard>().ToList()) cardsSelectable=true OnCardsSelected=@OnHandCardsSelected />
            </PoolWithCounter>
        </div>
    </div>
</div>